{"map":"{\"version\":3,\"sources\":[\"/var/www/manager_project/frontend-react/photography/src/multi-component/navigationMenu.js\",\"/var/www/manager_project/frontend-react/photography/src/multi-component/Earth.js\",\"/var/www/manager_project/frontend-react/photography/src/serviceWorker.js\",\"/var/www/manager_project/frontend-react/photography/src/index.js\"],\"names\":[\"useStyles\",\"makeStyles\",\"root\",\"width\",\"NavigationMenu\",\"classes\",\"_React$useState\",\"React\",\"useState\",\"_React$useState2\",\"Object\",\"slicedToArray\",\"value\",\"setValue\",\"react_default\",\"a\",\"createElement\",\"BottomNavigation\",\"onChange\",\"event\",\"newValue\",\"showLabels\",\"className\",\"BottomNavigationAction\",\"label\",\"icon\",\"Restore_default\",\"href\",\"Photo_default\",\"PhotoAlbum_default\",\"Favorite_default\",\"LocationOn_default\",\"Earth\",\"props\",\"_this\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"data\",\"height\",\"surfaceColor\",\"selectedColor\",\"haloColor\",\"backgroundColor\",\"initCountry\",\"lightMentioned\",\"disableUnmentioned\",\"transparentBackGround\",\"autoRotation\",\"rotationRatio\",\"halo\",\"oceanBrightness\",\"mentionedBrightness\",\"relatedBrightness\",\"console\",\"log\",\"_controller\",\"config\",\"control\",\"color\",\"surface\",\"selected\",\"background\",\"brightness\",\"ocean\",\"mentioned\",\"related\",\"Gio_min_default\",\"forceSwitchCountry\",\"setAutoRotation\",\"configs\",\"Gio\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"Earth_Earth\",\"document\",\"getElementById\",\"error\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react';\\nimport { makeStyles } from '@material-ui/core/styles';\\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\\nimport RestoreIcon from '@material-ui/icons/Restore';\\nimport FavoriteIcon from '@material-ui/icons/Favorite';\\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\\nimport Photo from '@material-ui/icons/Photo'\\nimport PhotoAlbum from '@material-ui/icons/PhotoAlbum'\\n\\nconst useStyles = makeStyles({\\n    root: {\\n        width: 500,\\n    },\\n});\\n\\nexport default function NavigationMenu() {\\n    const classes = useStyles();\\n    const [value, setValue] = React.useState(0);\\n\\n    return (\\n        <BottomNavigation\\n            value={value}\\n            onChange={(event, newValue) => {\\n                setValue(newValue);\\n            }}\\n            showLabels\\n            className={classes.root}\\n        >\\n            <BottomNavigationAction label=\\\"Recents\\\" icon={<RestoreIcon />}　href={\\\"/recents\\\"} />\\n            <BottomNavigationAction label=\\\"Photos\\\" icon={<Photo />}　href={\\\"/photography\\\"} />\\n            <BottomNavigationAction label=\\\"album\\\" icon={<PhotoAlbum />} />\\n            <BottomNavigationAction label=\\\"Favorites\\\" icon={<FavoriteIcon />} />\\n            <BottomNavigationAction label=\\\"Nearby\\\" icon={<LocationOnIcon />} />\\n        </BottomNavigation>\\n    );\\n}\",\"import React, {Component} from 'react'\\nimport axios from 'axios'\\nimport Gio from 'react-giojs'\\n\\nexport default class Earth extends Gio {\\n    constructor(props) {\\n        super(props);\\n\\n        this.state = {\\n            data: [\\n            ],\\n            width: 1000,\\n            height: 1000,\\n            surfaceColor: 0x436FB0,\\n            selectedColor: 0x78A6E2,\\n            haloColor: 0xC9E8FF,\\n            backgroundColor: 0x000000,\\n            initCountry: \\\"JP\\\",\\n            lightMentioned: true,\\n            disableUnmentioned: false,\\n            transparentBackGround: false,\\n            autoRotation: true,\\n            rotationRatio: 1,\\n            halo: true,\\n            oceanBrightness: 0.43,\\n            mentionedBrightness: 1,\\n            relatedBrightness: 0.46,\\n        };\\n\\n        /**\\n        this.onCountryPicked = function(selectedCountry, relatedCountry) {\\n            console.log(\\\"bbbb\\\");\\n            console.log(selectedCountry);\\n        };\\n         */\\n\\n        /**\\n\\n         setTimeout(() => {\\n            this.setState({\\n                data: [\\n                    {\\n                        \\\"e\\\": \\\"CN\\\",\\n                        \\\"i\\\": \\\"US\\\",\\n                        \\\"v\\\": 3300000\\n                    }\\n                ]\\n            });\\n        }, 3000);\\n\\n         setTimeout(() => {\\n            this.setState({forceSwitchCountry: \\\"US\\\"});\\n        }, 5000);\\n\\n         setTimeout(() => {\\n            this.setState({\\n                surfaceColor: 0x00FF00,\\n                selectedColor: 0x0000FF\\n            });\\n        }, 5000);\\n\\n         setTimeout(() => {\\n            this.setState({\\n                halo: false\\n            });\\n        }, 7000);\\n         */\\n    }\\n\\n    /**\\n    componentDidMount() {\\n        // fails\\n\\n        axios.get(`http://127.0.0.1:10000/var/www/manager_project/frontend-react/src/data/countryData.json`)\\n            .then(response => this.setState({data: response.data}))\\n\\n        console.log(\\\"aaaaa\\\");\\n    }\\n    */\\n\\n    componentDidMount() {\\n        console.log(this.props);\\n        console.log(this.state);\\n        console.log(this._controller);\\n    }\\n\\n    render() {\\n        const config = {\\n            control: {\\n                halo: this.state.halo,\\n                initCountry: this.state.initCountry,\\n                autoRotation: this.state.autoRotation,\\n                rotationRatio: this.state.rotationRatio,\\n                transparentBackGround: this.state.transparentBackGround\\n            },\\n            color: {\\n                surface: this.state.surfaceColor,\\n                selected: this.state.selectedColor,\\n                halo: this.state.haloColor,\\n                background: this.state.backgroundColor,\\n            },\\n            brightness: {\\n                ocean: this.state.oceanBrightness,\\n                mentioned: this.state.mentionedBrightness,\\n                related: this.state.relatedBrightness,\\n            }\\n        };\\n\\n        return (\\n            <Gio width={this.state.width}\\n                 height={this.state.height}\\n                 data={this.state.data}\\n                 forceSwitchCountry={this.state.forceSwitchCountry}\\n                 setAutoRotation={this.state.setAutoRotation}\\n                 configs={config}\\n            />\\n        )\\n    }\\n}\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport NavigationMenu from './multi-component/navigationMenu';\\nimport Earth from './multi-component/Earth';\\nimport * as serviceWorker from './serviceWorker';\\n\\ntry {\\n    ReactDOM.render(getDOM(), document.getElementById('root'));\\n    console.log(\\\"succeeded in rendering\\\")\\n} catch (error) {\\n    console.log(error);\\n    console.log(\\\"erroor\\\");\\n}\\n\\nfunction getDOM() {\\n    // You have to make the first character capital to use it as a component\\n    // fetch data from DB eventually\\n    return (\\n        <div>\\n            <NavigationMenu/>\\n            <Earth/>\\n        </div>\\n    )\\n}\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{54:function(t,e,a){t.exports=a(94)},58:function(t,e,a){},94:function(t,e,a){\"use strict\";a.r(e);var o=a(0),n=a.n(o),r=a(10),i=a.n(r),s=(a(58),a(48)),l=a(111),c=a(112),h=a(113),u=a(41),d=a.n(u),g=a(44),m=a.n(g),b=a(45),w=a.n(b),f=a(42),E=a.n(f),p=a(43),v=a.n(p),C=Object(l.a)({root:{width:500}});function k(){var t=C(),e=n.a.useState(0),a=Object(s.a)(e,2),o=a[0],r=a[1];return n.a.createElement(c.a,{value:o,onChange:function(t,e){r(e)},showLabels:!0,className:t.root},n.a.createElement(h.a,{label:\"Recents\",icon:n.a.createElement(d.a,null),href:\"/recents\"}),n.a.createElement(h.a,{label:\"Photos\",icon:n.a.createElement(E.a,null),href:\"/photography\"}),n.a.createElement(h.a,{label:\"album\",icon:n.a.createElement(v.a,null)}),n.a.createElement(h.a,{label:\"Favorites\",icon:n.a.createElement(m.a,null)}),n.a.createElement(h.a,{label:\"Nearby\",icon:n.a.createElement(w.a,null)}))}var y=a(46),B=a(17),R=a(49),j=a(47),O=a(50),G=(a(72),a(25)),J=a.n(G),S=function(t){function e(t){var a;return Object(y.a)(this,e),(a=Object(R.a)(this,Object(j.a)(e).call(this,t))).state={data:[],width:1e3,height:1e3,surfaceColor:4419504,selectedColor:7907042,haloColor:13232383,backgroundColor:0,initCountry:\"JP\",lightMentioned:!0,disableUnmentioned:!1,transparentBackGround:!1,autoRotation:!0,rotationRatio:1,halo:!0,oceanBrightness:.43,mentionedBrightness:1,relatedBrightness:.46},a}return Object(O.a)(e,t),Object(B.a)(e,[{key:\"componentDidMount\",value:function(){console.log(this.props),console.log(this.state),console.log(this._controller)}},{key:\"render\",value:function(){var t={control:{halo:this.state.halo,initCountry:this.state.initCountry,autoRotation:this.state.autoRotation,rotationRatio:this.state.rotationRatio,transparentBackGround:this.state.transparentBackGround},color:{surface:this.state.surfaceColor,selected:this.state.selectedColor,halo:this.state.haloColor,background:this.state.backgroundColor},brightness:{ocean:this.state.oceanBrightness,mentioned:this.state.mentionedBrightness,related:this.state.relatedBrightness}};return n.a.createElement(J.a,{width:this.state.width,height:this.state.height,data:this.state.data,forceSwitchCountry:this.state.forceSwitchCountry,setAutoRotation:this.state.setAutoRotation,configs:t})}}]),e}(J.a);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));try{i.a.render(n.a.createElement(\"div\",null,n.a.createElement(k,null),n.a.createElement(S,null)),document.getElementById(\"root\")),console.log(\"succeeded in rendering\")}catch(A){console.log(A),console.log(\"erroor\")}\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(t){t.unregister()})}},[[54,1,2]]]);","extractedComments":[]}